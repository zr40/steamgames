<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicExpresso.Core</name>
    </assembly>
    <members>
        <member name="T:DynamicExpresso.Lambda">
            <summary>
            Represents a lambda expression that can be invoked. This class is thread safe.
            </summary>
        </member>
        <member name="T:DynamicExpresso.Interpreter">
            <summary>
            Class used to parse and compile a text expression into an Expression or a Delegate that can be invoked. Expression are written using a subset of C# syntax.
            Only Parse and Eval methods are thread safe.
            </summary>
        </member>
        <member name="M:DynamicExpresso.Interpreter.SetFunction(System.String,System.Delegate)">
            <summary>
            Allow the specified function delegate to be called from a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.SetVariable(System.String,System.Object)">
            <summary>
            Allow the specified variable to be used in a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.SetVariable(System.String,System.Object,System.Type)">
            <summary>
            Allow the specified variable to be used in a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.SetExpression(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Allow the specified Expression to be used in a parsed expression.
            </summary>
            <param name="name"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.Reference(System.Type)">
            <summary>
            Allow the specified type to be used inside an expression. The type will be available using its name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.Reference(System.Type,System.String)">
            <summary>
            Allow the specified type to be used inside an expression by using a custom alias.
            </summary>
            <param name="type"></param>
            <param name="typeName">Public name that can be used in the expression.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.Parse(System.String,DynamicExpresso.Parameter[])">
            <summary>
            Parse a text expression and returns a Lambda class that can be used to invoke it.
            </summary>
            <param name="expressionText">Expression statement</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.Parse``1(System.String,System.String[])">
            <summary>
            Parse a text expression and convert it into a delegate.
            </summary>
            <typeparam name="TDelegate">Delegate to use</typeparam>
            <param name="expressionText">Expression statement</param>
            <param name="parametersNames">Names of the parameters. If not specified the parameters names defined inside the delegate are used.</param>
            <returns></returns>
        </member>
        <member name="M:DynamicExpresso.Interpreter.Eval(System.String,DynamicExpresso.Parameter[])">
            <summary>
            Parse and invoke the specified expression.
            </summary>
            <param name="expressionText"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:DynamicExpresso.Parameter">
            <summary>
            An expression parameter. This class is thread safe.
            </summary>
        </member>
    </members>
</doc>
